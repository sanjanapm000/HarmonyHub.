<%- include("../../views/partials/admin/header") %>
<head>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@10/dist/sweetalert2.min.css">
</head>
<div class="content-header">
    <div>
        <h2 class="content-title card-title">Products</h2>
    </div>
</div>
<header class="card-header text-center mb-20">
    <form action="" method="get" class="d-inline">
        <div class="input-group input-group-sm border border-1 border-grey rounded-pill" style="width: 500px; margin-left: 230px;">
            <input type="text" class="form-control border-0 rounded-pill" placeholder="Search products or brands" name="search">
            <button class="btn  border-0" type="submit">Search</button>
        </div>
    </form>
</header>
<div class="right mt-5">
    <table class="table table-striped">
        <thead>
            <tr>
                <th scope="col"><b>Product name</b></th>
                <!-- <th scope="col"><b>Brand</b></th> -->
                <th scope="col"><b>Category</b></th>
                <th scope="col"><b>Regular Price</b></th>
                <th scope="col"><b>Sale Price</b></th>
                <th scope="col"><b>Offer Price</b></th>
                <th scope="col"><b>Offer</b></th>
                <th scope="col"><b>Quantity</b></th>
                <th scope="col"><b>Status</b></th>
                <th scope="col"><b>Action</b></th>
                <th scope="col"><b>Edit</b></th>
            </tr>
        </thead>
        <tbody>

        <% for (let i = 0; i < data.length; i++) { %> 
        <tr>
            <td><%= data[i].productName %></td>
            <!-- <td><%= data[i].brand %></td> -->
            <td><%= data[i].category.name %></td>
            <td><%= data[i].regularPrice %></td>

            <td><%= data[i].salePrice %></td>
            <td>
                <% if (data[i].productOffer) { %>
                    <%= data[i].productOffer  %>%
                <% } else { %>
                    0%
                <% } %>
            </td>
            <td>
                <% if (data[i].productOffer === 0) { %>
                    <button class="btn btn-info" onclick="addOffer('<%= data[i]._id %>')" style="width: 100px;">
                        <a href="#" class="text-white">Add Offer</a>
                    </button>
                <%}else{%>
                    <button class="btn btn-info" onclick="removeOffer('<%= data[i]._id %>')" style="width: 100px;">
                        <a href="#" class="text-white">Remove</a>
                    </button>
                <% } %>
            </td>
            <td>
                <%= data[i].quantity %>
                <% if (data[i].quantity < 10) { %>
                    <span class="text-danger">(Low stock!)</span>
                <% } %>
            </td>
            <td>
                <!-- Add dropdown to change product status -->
                <select class="status-select" data-product-id="<%= data[i]._id %>">
                    <!-- Check quantity, if it's 0 then mark as out-of-stock -->
                    <option value="Available" <%= data[i].quantity > 0 && data[i].status !== 'Out of Stock' ? 'selected' : '' %>>Available</option>
                    <option value="Unavailable" <%= data[i].status === 'Unavailable' ? 'selected' : '' %>>Unavailable</option>
                    <option value="Out of Stock" <%= data[i].quantity === 0 || data[i].status === 'Out of Stock' ? 'selected' : '' %>>Out of Stock</option>
                </select>
            </td>
            <td>
               
                <button class="btn btn-danger toggle-block" data-product-id="<%= data[i]._id %>" >
                    <%= data[i].isBlocked ? "Unblock" : "Block" %>
                    
                </button>
            </td>
            <td>
                <button class="btn btn-info" style="width: 80px;">
                    <a href="/admin/editProduct?id=<%=data[i]._id%>" class="text-white" style="text-decoration: none;">Edit</a>
                </button>
            </td>
        </tr>
        <% } %>

        </tbody>

    </table>
</div>

<div class="container mt-3">
    <nav aria-label="Page navigation">
        <ul class="pagination justify-content-center mb-20" style="margin-right: 200px;">
            <% for (let i = 1; i <= totalPages; i++) { %>
                <li class="page-item <%= (i === currentPage) ? 'active' : '' %>">
                    <a class="page-link" href="?page=<%= i %>"><%= i %></a>
                </li>
            <% } %>
        </ul>
    </nav>
</div>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@10/dist/sweetalert2.min.js"></script>
<!-- <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script> -->
<script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>

<script>

document.querySelectorAll('.toggle-block').forEach(button => {
    button.addEventListener('click', async function() {
        const productId = this.getAttribute('data-product-id');
        
        try {
            const response = await fetch('/admin/toggle-block', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ productId })
            });

            const data = await response.json();

            if (data.status === "success") {
                // Change button text based on the new status
                this.innerText = data.isBlocked ? "Unblock" : "Block";

                // Optionally, update the display of the product (e.g., hide the blocked ones)
                if (data.isBlocked) {
                    // Hide or visually mark the blocked product (e.g., using CSS)
                    this.closest('tr').style.display = 'none';
                } else {
                    // Show the unblocked product
                    this.closest('tr').style.display = '';
                }

                alert(data.message); // Show a success message
                window.location.reload();
            } else {
                alert("Error toggling block/unblock");
            }
        } catch (error) {
            console.error("Error blocking/unblocking product:", error);
            alert("Error blocking/unblocking product");
        }
    });
});




document.querySelectorAll('.status-select').forEach(select => {
    select.addEventListener('change', async function() {
        const productId = this.getAttribute('data-product-id');
        const newStatus = this.value;



        console.log('Sending productId:', productId);  // Debugging log
        console.log('Sending newStatus:', newStatus);
        try {
            const response = await fetch('/admin/update-status', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ productId, newStatus })
            });

            const data = await response.json();

            if (data.status === 'success') {
                alert('Product status updated successfully!');
            } else {
                alert('Error updating product status.');
            }
        } catch (error) {
            console.error('Error updating product status:', error);
            alert('An error occurred while updating the product status.');
        }
    });
});



async function addOffer(productId) {
    try {
        const { value: amount } = await Swal.fire({
            title: 'Offer in percentage',
            input: 'number',
            inputLabel: 'Percentage',
            inputPlaceholder: '%'
        });

        if (amount) {
            const response = await fetch("/admin/addProductOffer", {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    percentage: amount,
                    productId: productId
                })
            });

            const data = await response.json();

            if (data.status === true) {
                await Swal.fire('Offer added', 'The offer has been added successfully.', 'success');
                location.reload();
            } else {
                await Swal.fire('Failed', data.message || 'Failed to add offer.', 'error');
            }
        }
    } catch (error) {
        console.error('Error adding offer:', error);
        await Swal.fire('Error', 'An error occurred while adding the offer.', 'error');
    }
}

async function removeOffer(productId) {
    try {
        const result = await Swal.fire({
            title: 'Remove Offer',
            text: "Are you sure you want to remove this offer?",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'YES, Remove It!',
            timer: 5000,
            timerProgressBar: true
        });

        if (result.isConfirmed) {
            const response = await fetch("/admin/removeProductOffer", {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    productId: productId
                })
            });

            const data = await response.json();

            if (data.status === true) {
                await Swal.fire('Removed!', 'The offer has been removed.', 'success');
                location.reload();
            } else {
                await Swal.fire('Failed', 'Failed to remove the offer.', 'error');
            }
        }
    } catch (error) {
        console.error("Error removing offer:", error);
        await Swal.fire('Failed', 'An error occurred while removing the offer.', 'error');
    }
}

</script>
<%- include("../../views/partials/admin/footer") %>
